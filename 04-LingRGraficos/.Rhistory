setwd("C:/Users/paloma/Desktop/GitHub/R-Tools/04-LingRGraficos")
getwd()
setwd("C:/Users/paloma/Desktop/GitHub/R-Tools/04-LingRGraficos")
getwd()
setwd("C:/Users/paloma/Desktop/GitHub/R-Tools/04-LingRGraficos")
getwd()
"C:/Users/paloma/Desktop/GitHub/R-Tools/04-LingRGraficos"
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
data(tips, package = 'reshape2')
View(tips)
qplot(total_bill, tip, data = tips, geom = "point")
knitr::opts_chunk$set(echo = TRUE)
# Plotando um gráfico básico com qplot() - (tips => dataset que vem com R)
data(tips, package = 'reshape2')
# qplot fç do ggplot2, gera um scatterplot
qplot(total_bill, tip, data = tips, geom = "point")
# Plotando um gráfico básico com qplot() - (tips => dataset que vem com R)
data(tips, package = 'reshape2')
# qplot fç do ggplot2, gera um scatterplot
qplot(total_bill, tip, data = tips, geom = "point")
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
# Usando a gramática dos gráficos:
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
# ggplot é a fç do ggplot2
ggplot() + camada1
# Usando a gramática dos gráficos:
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
# ggplot é a fç do ggplot2
ggplot() + camada1
# Contruindo um modelo de regressão
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
)
head(modelo_fit)
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
ggplot() + camada1 + camada2
# Camada 2 - colocar o modelo de regressão (modelo_fit) na forma de linha (geom_line())
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
# Camada 1 (pontos) e camada 2(linha de regressão)
ggplot() + camada1 + camada2
# Camada 2 - colocar o modelo de regressão (modelo_fit) na forma de linha (geom_line())
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
# Camada 1 (pontos) e camada 2(linha de regressão)
ggplot() + camada1 + camada2
# Camada 3
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
# alpha = espessura
# geom_ribbon = limite de confiança (margem de erro do modelo de regressão(modelo preditivo))
ggplot() + camada1 + camada2 + camada3
# Versão final otimizada - as 3 camadas acima, podem ser resumidas aos seguintes comandos:
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
# Gravando o gráfico em um objeto
myplot <- ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
class(myplot)
print(myplot)
# ScatterPlot com linha de regressão (que é um modelo preditivo)
# Dados
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var1 = 1:100 +
rnorm(100,sd = 9), var2 = 1:100 +
rnorm(100,sd = 16))
# Plot
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)
# Bar Plot
# Dados
data = data.frame(grupo = c("A ","B ","C ","D ") ,
valor = c(33,62,56,67) ,
num_obs = c(100,500,459,342))
# Gerando a massa de dados (cumsum= soma acumulada)
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right,
ymax = valor, colour = grupo, fill = grupo)) +
xlab("Número de Observações") + ylab("Valor")
head(mtcars)
ggplot(data = mtcars, aes(x = disp, y = mpg)) + geom_point()
head(mtcars)
ggplot(data = mtcars, aes(x = disp, y = mpg)) + geom_point()
# Outro aspecto que pode ser mapeado nesse gráfico é a cor dos pontos
ggplot(data = mtcars,
aes(x = disp, y = mpg,
colour = as.factor(am))) + geom_point()
# No entanto, tambem podemos mapear uma variável contínua à cor dos pontos:
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl)) + geom_point()
# Também podemos mapear o tamanho dos pontos à uma variável de interesse:
# A legenda é inserida no gráfico automaticamente
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
# Os geoms definem qual forma geométrica será utilizada para a visualização dos dados no gráfico.
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) + geom_boxplot()
# Histogramas
ggplot(mtcars, aes(x = mpg), binwidth = 30) + geom_histogram()
# Gráfico de Barras
ggplot(mtcars, aes(x = as.factor(cyl))) + geom_bar()
# Personalizando os gráficos
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
colour = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
fill = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars,
aes(x = as.factor(cyl), y = mpg)) +
geom_boxplot(color = "blue", fill = "seagreen4")
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
colour = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
fill = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars,
aes(x = as.factor(cyl), y = mpg)) +
geom_boxplot(color = "blue", fill = "seagreen4")
# Podemos alterar os eixos
ggplot(mtcars, aes(x = mpg)) +
geom_histogram() +
xlab("Milhas por galão") + ylab("Frequência")
# Legendas
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
# Trocando a posição da legenda (theme)
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl") +
theme(legend.position = "top")
# Sem legenda
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
guides(fill = FALSE)
# Facets - (vários graficos na mesma área de plotagem( facet_grid))
# Horizontal:
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(am~.)
# Vertical:
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(.~am)
# Plots diferentes juntos (diferente de Facet)
install.packages("gridExtra")
library(gridExtra)
library(ggplot2)
# Dataset diamonds(da ling R)
data(diamonds)
# Histograma como plot1
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
# ScatterPlot como plot2
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
# Combina os 2 plots na mesma área (graficos diferentes, potem na mesma area = não é facet)
grid.arrange(plot1, plot2, ncol = 1)
# Histograma como plot1
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
# ScatterPlot como plot2
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
# Combina os 2 plots na mesma área (graficos diferentes, potem na mesma area = não é facet)
grid.arrange(plot1, plot2, ncol = 1)
data(diamonds)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5 , alpha = 0.2)
ggplot(data = diamonds,aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5, position = "fill")
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5 , alpha = 0.2)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5 , alpha = 0.2)
ggplot(data = diamonds,aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5, position = "fill")
ggplot(data = diamonds,aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5, position = "fill")
install.packages("reshape2")
library(reshape2)
library(reshape2)
library(plotly) # Com esse pacote é possivel publicar online, não é gratuito
install.packages("plotly")
library(reshape2)
library(plotly) # Com esse pacote é possivel publicar online, não é gratuito
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
# Os recursos interativos são do plotly
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
# Os recursos interativos são do plotly
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
# Os recursos interativos são do plotly
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly()
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
ggplotly()
sp + facet_grid(sex ~ .)
sp + facet_grid(sex ~ .)
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
knitr::opts_chunk$set(echo = TRUE)
# Instalando e carregando o pacote
install.packages("ggplot2")
library(ggplot2)
# Plotando um gráfico básico com qplot() - (tips => dataset que vem com R)
data(tips, package = 'reshape2')
# qplot fç do ggplot2, gera um scatterplot
qplot(total_bill, tip, data = tips, geom = "point")
# Usando a gramática dos gráficos:
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
# ggplot é a fç do ggplot2
ggplot() + camada1
# Contruindo um modelo de regressão
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
)
head(modelo_fit)
# Camada 2 - colocar o modelo de regressão (modelo_fit) na forma de linha (geom_line())
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
# Camada 1 (pontos) e camada 2(linha de regressão)
ggplot() + camada1 + camada2
# Camada 3
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
# alpha = espessura
# geom_ribbon = limite de confiança (margem de erro do modelo de regressão(modelo preditivo))
ggplot() + camada1 + camada2 + camada3
# Versão final otimizada - as 3 camadas acima, podem ser resumidas aos seguintes comandos:
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
# ScatterPlot com linha de regressão (que é um modelo preditivo)
# Dados
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var1 = 1:100 +
rnorm(100,sd = 9), var2 = 1:100 +
rnorm(100,sd = 16))
# Plot
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)
# Bar Plot
# Dados
data = data.frame(grupo = c("A ","B ","C ","D ") ,
valor = c(33,62,56,67) ,
num_obs = c(100,500,459,342))
# Gerando a massa de dados (cumsum= soma acumulada)
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
# Plot
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right,
ymax = valor, colour = grupo, fill = grupo)) +
xlab("Número de Observações") + ylab("Valor")
head(mtcars)
ggplot(data = mtcars, aes(x = disp, y = mpg)) + geom_point()
# Outro aspecto que pode ser mapeado nesse gráfico é a cor dos pontos
ggplot(data = mtcars,
aes(x = disp, y = mpg,
colour = as.factor(am))) + geom_point()
# No entanto, tambem podemos mapear uma variável contínua à cor dos pontos:
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl)) + geom_point()
# Também podemos mapear o tamanho dos pontos à uma variável de interesse:
# A legenda é inserida no gráfico automaticamente
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
