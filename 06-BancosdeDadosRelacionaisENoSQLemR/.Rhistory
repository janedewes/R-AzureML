# Gráfico de Barras
ggplot(mtcars, aes(x = as.factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
colour = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
fill = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars,
aes(x = as.factor(cyl), y = mpg)) +
geom_boxplot(color = "blue", fill = "seagreen4")
# Podemos alterar os eixos
ggplot(mtcars, aes(x = mpg)) +
geom_histogram() +
xlab("Milhas por galão") + ylab("Frequência")
# Legendas
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
# Trocando a posição da legenda (theme)
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl") +
theme(legend.position = "top")
# Sem legenda
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
guides(fill = FALSE)
# Facets - (vários graficos na mesma área de plotagem( facet_grid))
# Horizontal:
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(am~.)
# Vertical:
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(.~am)
# Plots diferentes juntos (diferente de Facet)
# install.packages("gridExtra")
library(gridExtra)
library(ggplot2)
# Dataset diamonds(da ling R)
data(diamonds)
# Histograma como plot1
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
# ScatterPlot como plot2
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
# Combina os 2 plots na mesma área (graficos diferentes, potem na mesma area  (não é facet)
grid.arrange(plot1, plot2, ncol = 1)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5 , alpha = 0.2)
ggplot(data = diamonds,aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5, position = "fill")
library(reshape2)
library(plotly) # Com esse pacote é possivel publicar online, não é gratuito
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly() # Os recursos interativos são do plotly
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
setwd("C:/Users/paloma/Desktop/GitHub/R-Tools/04-LingRGraficos")
knitr::opts_chunk$set(echo = TRUE)
# def Data
attach(sleep)
sleepboxplot = boxplot(data = sleep, extra ~ group,
main = "Duração do Sono",
col.main = "red", ylab = "Horas", xlab = "Droga")
# Horizontal boxplot
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab = "", xlab = "", horizontal = T)
# Add color
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab = "", xlab = "", horizontal = T,
col = c("blue", "red") )
# Def data
x = rnorm(10,5,7)
y = rpois(10,7)
z = rnorm(10,6,7)
t = rpois(10,9)
# Plot
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "Variável Independente",
ylab = "Variável Dependente")
# Add points
points(z, t, col = "blue", pch = 4)
# Add points
points(y, t, col = 777, pch = 9)
# Add legend
legend(-6,5.9, legend = c("Nível 1", "Nível 2", "Nível 3"),
col = c(123, "blue", 777), pch = c(10,4,9),
cex = 0.65, bty = "n")
# Def data
dados <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
dados
# Nomeando linhas e colunas na matriz
colnames(dados) <- c("0","1-150","151-300",">300")
rownames(dados) <- c("Jovem","Adulto","Idoso")
dados
# Construindo o Barplot
barplot(dados, beside = T)
barplot(dados)
# Construindo o plot - Stacked Bar Plot
# As 3 faixas de idade são representadas na mesma coluna para as diferentes quantidades
barplot(dados, col = c("steelblue1", "tan3", "seagreen3"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
# Color and legend
barplot(dados, beside = T, col = c("steelblue1", "tan3", "seagreen3"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
# Com a Transposta da matriz, inverter as posições entre faixa etária e faixa de quantidade
t(dados)
# Grafico de transp dos dados
barplot(t(dados), beside = T, col = c("steelblue1", "tan3", "seagreen3", "peachpuff1"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3", "peachpuff1"), legend = c("0","1-150","151-300",">300"))
# Def data
dados = cars$speed
# Construindo um histograma - é usado para visualizar a distribuição de freq de UMA variável.
# divide em classes (grupos) de dados que aparecem com maior/menor frequencia.
hist(dados)
hist(dados, breaks = 10, main = "Histograma das Velocidades") # breaks: caixinhas
hist(dados, labels = T, breaks = c(0,5,10,20,30), main = "Histograma das Velocidades") # caixinhas específicas
hist(dados, labels = T, breaks = 10, main = "Histograma das Velocidades") # mostra o total de freq das caixinhas
hist(dados, labels = T, ylim = c(0,10), breaks = 10, main = "Histograma das Velocidades")
# Adicionando linhas ao histograma
grafico <- hist(dados, breaks = 10, main = "Histograma das Velocidades")
# Criando uma distribuição normal, media, desvio padrão
xaxis = seq(min(dados), max(dados), length = 10)
yaxis = dnorm(xaxis, mean = mean(dados), sd = sd(dados))
#calcular a diferença:
yaxis = yaxis*diff(grafico$mids)*length(dados)
#acrescentar mais uma camada = distribuição normal
lines(xaxis, yaxis, col = "red")
# Criando as fatias
fatias = c(40, 20, 40)
# Nomeando os labels
paises = c("Brasil", "Argentina", "Chile")
# Unindo paises e fatias - com a fç paste
paises = paste(paises, fatias)
# Incluindo mais detalhes no label
paises = paste(paises, "%", sep = "")
# Construindo um gráfico
pie(fatias, labels = paises,
col = c("darksalmon", "gainsboro", "lemonchiffon4"),
main ="Dsitribuição de Vendas")
# Def dataframe (iris)
attach(iris)
Values = table(Species)
labels = paste(names(Values))
pie(Values, labels = labels, main = "Distribuição de Espécies")
# 3D - Pcte Plotrix
library(plotrix)
pie3D(fatias, labels = paises, explode = 0.05,
col = c("steelblue1", "tomato2", "tan3"),
main = "Dsitribuição de Vendas")
# explode = divisão entre as fatias.
# def Data
attach(sleep)
sleepboxplot = boxplot(data = sleep, extra ~ group,
main = "Duração do Sono",
col.main = "red", ylab = "Horas", xlab = "Droga")
# Horizontal boxplot
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab = "", xlab = "", horizontal = T)
# Add color
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab = "", xlab = "", horizontal = T,
col = c("blue", "red") )
# Def data
x = rnorm(10,5,7)
y = rpois(10,7)
z = rnorm(10,6,7)
t = rpois(10,9)
# Plot
plot(x, y, col = 123, pch = 10, main = "Multi Scatterplot",
col.main = "red", cex.main = 1.5, xlab = "Variável Independente",
ylab = "Variável Dependente")
# Add points
points(z, t, col = "blue", pch = 4)
# Add points
points(y, t, col = 777, pch = 9)
# Add legend
legend(-6,5.9, legend = c("Nível 1", "Nível 2", "Nível 3"),
col = c(123, "blue", 777), pch = c(10,4,9),
cex = 0.65, bty = "n")
# Def data
dados <- matrix(c(652,1537,598,242,36,46,38,21,218,327,106,67), nrow = 3, byrow = T)
dados
# Nomeando linhas e colunas na matriz
colnames(dados) <- c("0","1-150","151-300",">300")
rownames(dados) <- c("Jovem","Adulto","Idoso")
dados
# Construindo o Barplot
barplot(dados, beside = T)
barplot(dados)
# Construindo o plot - Stacked Bar Plot
# As 3 faixas de idade são representadas na mesma coluna para as diferentes quantidades
barplot(dados, col = c("steelblue1", "tan3", "seagreen3"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
# Color and legend
barplot(dados, beside = T, col = c("steelblue1", "tan3", "seagreen3"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3"), legend = c("Jovem","Adulto","Idoso"))
# Com a Transposta da matriz, inverter as posições entre faixa etária e faixa de quantidade
t(dados)
# Grafico de transp dos dados
barplot(t(dados), beside = T, col = c("steelblue1", "tan3", "seagreen3", "peachpuff1"))
legend("topright", pch = 15, col = c("steelblue1", "tan3", "seagreen3", "peachpuff1"), legend = c("0","1-150","151-300",">300"))
# Def data
dados = cars$speed
# Construindo um histograma - é usado para visualizar a distribuição de freq de UMA variável.
# divide em classes (grupos) de dados que aparecem com maior/menor frequencia.
hist(dados)
hist(dados, breaks = 10, main = "Histograma das Velocidades") # breaks: caixinhas
hist(dados, labels = T, breaks = c(0,5,10,20,30), main = "Histograma das Velocidades") # caixinhas específicas
hist(dados, labels = T, breaks = 10, main = "Histograma das Velocidades") # mostra o total de freq das caixinhas
hist(dados, labels = T, ylim = c(0,10), breaks = 10, main = "Histograma das Velocidades")
# Adicionando linhas ao histograma
grafico <- hist(dados, breaks = 10, main = "Histograma das Velocidades")
# Criando uma distribuição normal, media, desvio padrão
xaxis = seq(min(dados), max(dados), length = 10)
yaxis = dnorm(xaxis, mean = mean(dados), sd = sd(dados))
#calcular a diferença:
yaxis = yaxis*diff(grafico$mids)*length(dados)
#acrescentar mais uma camada = distribuição normal
lines(xaxis, yaxis, col = "red")
# Criando as fatias
fatias = c(40, 20, 40)
# Nomeando os labels
paises = c("Brasil", "Argentina", "Chile")
# Unindo paises e fatias - com a fç paste
paises = paste(paises, fatias)
# Incluindo mais detalhes no label
paises = paste(paises, "%", sep = "")
# Construindo um gráfico
pie(fatias, labels = paises,
col = c("darksalmon", "gainsboro", "lemonchiffon4"),
main ="Distribuição de Vendas")
# Def dataframe (iris)
attach(iris)
Values = table(Species)
labels = paste(names(Values))
pie(Values, labels = labels, main = "Distribuição de Espécies")
# 3D - Pcte Plotrix
library(plotrix)
pie3D(fatias, labels = paises, explode = 0.05,
col = c("steelblue1", "tomato2", "tan3"),
main = "Distribuição de Vendas")
# explode = divisão entre as fatias.
getwd()
setwd("C:/Users/paloma/Desktop/GitHub/R-Tools/04-LingRGraficos")
getwd()
install.packages('lattice')
install.packages("lattice")
library(lattice)
# Instalar e carregar o pacote
# install.packages('lattice')
library(lattice)
# ScatterPlot com Lattice (dataset iris)
# fç xyplot
xyplot(data = iris, groups = Species, Sepal.Length ~ Petal.Length)
# BarPlots com dataset Titanic (dataset da ling R)
# fç usada é o barchart
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2),
scales = list(x = "free"))
# Contagem de elementos
PetalLength <- equal.count(iris$Petal.Length, 4)
PetalLength
# ScatterPlots
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris)
# relação de duas variaveis com outra (uma) variável
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(...) {
panel.grid(h = -1, v = -1, col.line = "skyblue")
panel.xyplot(...)})
# ScatterPlots
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris)
# relação de duas variaveis com outra (uma) variável
# Add legend
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(...) {
panel.grid(h = -1, v = -1, col.line = "skyblue")
panel.xyplot(...)})
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(...) {
panel.grid(h = -1, v = -1, col.line = "skyblue")
panel.xyplot(...)})
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(x,y,...) {
panel.xyplot(x,y,...)
mylm <- lm(y~x)
panel.abline(mylm)})
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(...) {
panel.grid(h = -1, v = -1, col.line = "skyblue")
panel.xyplot(...)})
# add lm
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(x,y,...) {
panel.xyplot(x,y,...)
mylm <- lm(y~x)
panel.abline(mylm)})
# lm modelo de regressão(preditivo)
# Histogram
histogram(~Sepal.Length | Species, xlab = "",
data = iris, layout=c(3,1), type = "density",
main = "Histograma Lattice", sub = "Iris Dataset, Sepal Length")
# Distribuição dos dados
qqmath(~ Sepal.Length | Species, data = iris, distribution = qunif)
# Boxplot
bwplot(Species~Sepal.Length, data = iris)
# ViolinPlot
bwplot(Species~Sepal.Length, data = iris,
panel = panel.violin)
# Instalar e carregar o pacote
# install.packages('lattice')
library(lattice)
# ScatterPlot com Lattice (dataset iris)
# fç xyplot
xyplot(data = iris, groups = Species, Sepal.Length ~ Petal.Length)
# BarPlots com dataset Titanic (dataset da ling R)
# fç usada é o barchart
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout = c(4, 1),
auto.key = list(title = "Dados Titanic", columns = 2),
scales = list(x = "free"))
# Contagem de elementos
# Dataset iris
PetalLength <- equal.count(iris$Petal.Length, 4)
PetalLength
# ScatterPlots
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris)
# relação de duas variaveis com outra (uma) variável
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(...) {
panel.grid(h = -1, v = -1, col.line = "skyblue")
panel.xyplot(...)})
# add lm
xyplot(Sepal.Length~Sepal.Width | PetalLength, data = iris,
panel = function(x,y,...) {
panel.xyplot(x,y,...)
mylm <- lm(y~x)
panel.abline(mylm)})
# lm modelo de regressão(preditivo)
# Histograma das 3 distrib.
histogram(~Sepal.Length | Species, xlab = "",
data = iris, layout=c(3,1), type = "density",
main = "Histograma Lattice", sub = "Iris Dataset, Sepal Length")
# Distribuição dos dados
qqmath(~ Sepal.Length | Species, data = iris, distribution = qunif)
# Boxplot
bwplot(Species~Sepal.Length, data = iris)
# ViolinPlot
bwplot(Species~Sepal.Length, data = iris,
panel = panel.violin)
getwd()
install.packages(c("ggplot2", "maps", "mapdata"))
install.packages(c("ggplot2", "maps", "mapdata"))
library(ggplot2)
library(maps)
library(mapdata)
install.packages("mapdata")
library(mapdata)
# Função para buscar as coordenadas dos países
?map_data
mapa <- map_data("world")
# Visualizando o dataframe
dim(mapa)
View(mapa)
ggplot() + geom_polygon(data = mapa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
# Tira o preenchimento e coloca o contorno
ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = NA, color = "blue") +
coord_fixed(1.3)
# Preenchimento com uuma cor diferente
gg1 <- ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = "seagreen1", color = "blue") +
coord_fixed(1.3)
gg1
# Preenchimento com uuma cor diferente
gg1 <- ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = "seagreen1", color = "blue") +
coord_fixed(1.3)
gg1
# Representando os pontos no mapa (é possivel escolher por lat e lon)
# Marcando alguns pontos no mapa
# Podemos usar um shapefile ( no BR: site do IBGE)
labs <- data.frame(
long = c(69.24140, -2.8456051),
lat = c(-78.38995, 22.44512),
names = c("Ponto1", "Ponto2"),
stringsAsFactors = FALSE
)
# colocando pontos(def acima) no mapa
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "yellow", size = 2)
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "red", size = 2)
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "violet", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "red", size = 2)
# colocando pontos(def acima) no mapa
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "blue", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "red", size = 2)
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "red", size = 2)
# Divisão por países
ggplot(data = mapa) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
?maps
?map_data
?map_data
# Instalar e carregar os pacotes
# install.packages(c("ggplot2", "maps", "mapdata"))
library(ggplot2)
library(maps)
library(mapdata)
# Função para buscar as coordenadas dos países
# (?map_data)
mapa <- map_data("world")
# Gerando o mapa
ggplot() + geom_polygon(data = mapa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
# Tira o preenchimento e coloca o contorno
ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = NA, color = "blue") +
coord_fixed(1.3)
# Tira o preenchimento e coloca o contorno
ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = NA, color = "blue") +
coord_fixed(1.3)
# Representando os pontos no mapa (é possivel escolher por lat e lon)
# Marcando alguns pontos no mapa
# Podemos usar um shapefile ( no BR: site do IBGE)
labs <- data.frame(
long = c(69.24140, -2.8456051),
lat = c(-78.38995, 22.44512),
names = c("Ponto1", "Ponto2"),
stringsAsFactors = FALSE
)
# colocando pontos(def acima) no mapa
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "red", size = 2)
# Divisão por países
ggplot(data = mapa) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
# Preenchimento com uuma cor diferente
gg1 <- ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = "seagreen1", color = "blue") +
coord_fixed(1.3)
gg1
# Instalar e carregar os pacotes
# install.packages(c("ggplot2", "maps", "mapdata"))
library(ggplot2)
library(maps)
library(mapdata)
# Função para buscar as coordenadas dos países
# (?map_data)
mapa <- map_data("world")
# Gerando o mapa
ggplot() + geom_polygon(data = mapa, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3)
# Tira o preenchimento e coloca o contorno
ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = NA, color = "blue") +
coord_fixed(1.3)
# Preenchimento com uuma cor diferente
gg1 <- ggplot() +
geom_polygon(data = mapa, aes(x=long, y = lat, group = group), fill = "seagreen1", color = "blue") +
coord_fixed(1.3)
gg1
# Representando os pontos no mapa (é possivel escolher por lat e lon)
# Marcando alguns pontos no mapa
# Podemos usar um shapefile ( no BR: site do IBGE)
labs <- data.frame(
long = c(69.24140, -2.8456051),
lat = c(-78.38995, 22.44512),
names = c("Ponto1", "Ponto2"),
stringsAsFactors = FALSE
)
# colocando pontos(def acima) no mapa
gg1 +
geom_point(data = labs, aes(x = long, y = lat), color = "black", size = 2) +
geom_point(data = labs, aes(x = long, y = lat), color = "red", size = 2)
# Divisão por países
ggplot(data = mapa) +
geom_polygon(aes(x = long, y = lat, fill = region, group = group), color = "white") +
coord_fixed(1.3) +
guides(fill=FALSE)
?map_data
setwd("C:/Users/paloma/Desktop/GitHub/R-Tools/06-BancosdeDadosRelacionaisENoSQLemR")
setwd("C:/Users/paloma/Desktop/GitHub/R-Tools/06-BancosdeDadosRelacionaisENoSQLemR")
getwd()
